# -*- coding: utf-8 -*-
"""SIFT_Mistral_7b_4bit_QLora_QA_Trainand Eval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lmsAjLohc0U42LfVMDPOSTu5XifN9nNd

# Train a Mistal 7B model with a very small data set, 4 bit quantised

with QA based genenered training for SFTTrainer
see https://colab.research.google.com/drive/1lZdGovQbEKwEmKzSWfx1JMnmdPNphgjz#scrollTo=HFDYf0lmLhFp
"""

#!pip install -q accelerate peft bitsandbytes transformers trl huggingface_hub

import torch
from datasets import load_dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    TrainingArguments,
    logging,
)
import torch.nn as nn
from peft import LoraConfig, PeftModel
from trl import SFTTrainer
# lets use the best model in town to check if we get any better
# for NotImplementedError: A UTF-8 locale is required. Got ANSI_X3.4-1968
import locale
locale.getpreferredencoding = lambda: "UTF-8"
from datasets import load_dataset
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, handlers=[logging.FileHandler("training_logs.txt")])

model_name = "mistralai/Mistral-7B-Instruct-v0.1"
#model_name = "mistralai/Mistral-13B-Instruct-v0.1"

# Check if CUDA is available
if torch.cuda.is_available():
    # Print the total number of CUDA devices detected
    print(f"Detected {torch.cuda.device_count()} CUDA capable device(s)")

    # Enumerate and print properties for each CUDA device
    for i in range(torch.cuda.device_count()):
        print(f"Device {i}: {torch.cuda.get_device_name(i)}")
        print(f"  Memory Allocation: {torch.cuda.memory_allocated(i)} / {torch.cuda.memory_reserved(i)} (allocated/reserved in bytes)")
        print(f"  Memory Cached: {torch.cuda.memory_reserved(i)} (cached in bytes)")
        print(f"  Capability: {torch.cuda.get_device_capability(i)}")
        print(f"  Device Properties: {torch.cuda.get_device_properties(i)}\n")
else:
    print("No CUDA devices detected")
    
# Load the entire model on the GPU 0
device_map = {"": 0} # lets load on the next
device = torch.device('cuda:1')

# Specify the GPU (1) to use
#os.environ["CUDA_VISIBLE_DEVICES"] = "1"

################################################################################
# QLoRA parameters
################################################################################

# LoRA attention dimension
lora_r = 64

# Alpha parameter for LoRA scaling
lora_alpha = 16

# Dropout probability for LoRA layers
lora_dropout = 0.1

################################################################################
# bitsandbytes parameters
################################################################################

# Activate 4-bit precision base model loading
use_4bit = True

# Compute dtype for 4-bit base models
bnb_4bit_compute_dtype = "float16"

# Quantization type (fp4 or nf4)
bnb_4bit_quant_type = "nf4"

# Activate nested quantization for 4-bit base models (double quantization)
use_nested_quant = False

################################################################################
# TrainingArguments parameters
################################################################################

# Output directory where the model predictions and checkpoints will be stored
output_dir = "./results13"

# Number of training epochs
num_train_epochs = 1

# Enable fp16/bf16 training (set bf16 to True with an A100)
fp16 = True
bf16 = False

# Batch size per GPU for training
per_device_train_batch_size =  1 # out of memory even with 2!

# Batch size per GPU for evaluation
per_device_eval_batch_size = 1

# Number of update steps to accumulate the gradients for
gradient_accumulation_steps = 1

# Enable gradient checkpointing
gradient_checkpointing = True

# Maximum gradient normal (gradient clipping)
max_grad_norm = 0.3

# Initial learning rate (AdamW optimizer)
learning_rate = 2e-4

# Weight decay to apply to all layers except bias/LayerNorm weights
weight_decay = 0.001

# Optimizer to use
optim = "paged_adamw_32bit"

# Learning rate schedule (constant a bit better than cosine)
lr_scheduler_type = "constant"

# Number of training steps (overrides num_train_epochs)
max_steps = -1

# Ratio of steps for a linear warmup (from 0 to learning rate)
warmup_ratio = 0.03

# Group sequences into batches with same length
# Saves memory and speeds up training considerably
group_by_length = True

# Save checkpoint every X updates steps
save_steps = 1000

# Log every X updates steps
logging_steps = 10

################################################################################
# SFT parameters
################################################################################

# Maximum sequence length to use
max_seq_length = 1024

# Pack multiple short examples in the same input sequence to increase efficiency
packing = False


train_path = 'qa_mistral_instruct.json'

# Load the dataset
train_dataset = load_dataset('json', data_files=train_path, field='data')

print(f"Length of train_dataset={len(train_dataset['train'])}")

# Access and print the first few samples
print(train_dataset['train'][:2])

# Load tokenizer and model with QLoRA configuration
compute_dtype = getattr(torch, bnb_4bit_compute_dtype)
bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)
# Check GPU compatibility with bfloat16
if compute_dtype == torch.float16 and use_4bit:
    major, _ = torch.cuda.get_device_capability()
    if major >= 8:
        print("=" * 80)
        print("Your GPU supports bfloat16: accelerate training with bf16=True")
        print("=" * 80)
        bf16 = True    
        fp16 = False
  
# Load base model
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map=device_map
)


model.config.use_cache = False
model.config.pretraining_tp = 1

# Load LLaMA tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
# Configure tokenizer
tokenizer.padding_side = 'right'


# Load LoRA configuration
peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=[
        "q_proj",
        "k_proj",
        "v_proj",
        "o_proj",
        "gate_proj",
        "up_proj",
        "down_proj",
        "lm_head",
    ],

)


model.train()
# Set training parameters
training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    weight_decay=weight_decay,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    #group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type
   # report_to="tensorboard"
)

# Set supervised fine-tuning parameters
trainer = SFTTrainer(
    model=model,
    train_dataset=train_dataset['train'],
    peft_config=peft_config,
    dataset_text_field="t",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
    packing=packing,
)

# Train model
trainer.train()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir results/runs

trainer.save_model() #T4 8 GB GPU RAM

#!zip  mistral-7B-4bit-igodo.zip results/adapter_config.json results/adapter_model.bin results/special_tokens_map.json results/tokenizer.json results/tokenizer_config.json  results/training_args.bin

#!cp mistral-7B-4bit-igodo.zip ./drive/MyDrive/models

"""# Test Model directly"""

model.eval()

#<s>[INST] Instruction [/INST] Model answer</s>[INST] Follow-up instruction [/INST]
#https://www.promptingguide.ai/models/mistral-7b

prompt =f""" How do I start with Network As Code to increase QoS?  """
prompt_template=f'''<s>[INST]
{prompt}[/INST]]'''

inputs = tokenizer(prompt_template, return_tensors="pt")
outputs = model.generate(**inputs.to('cuda') ,max_new_tokens=200)
output = tokenizer.batch_decode(outputs, skip_special_tokens=True)
print(f"Infer output {output}")
#Output of model trained for 100
outputcont = "".join(output)
parts = outputcont.split("[/INST]", 1)
print(prompt)
print(parts[1])

